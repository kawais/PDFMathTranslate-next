name: macOS Build

on:
  workflow_dispatch:
  push:
    tags:
      - 'v*.*.*'

jobs:
  build-macos:
    name: Build on ${{ matrix.runs_on }} (Python ${{ matrix.python-version }})
    runs-on: ${{ matrix.runs_on }}
    strategy:
      fail-fast: false
      matrix:
        runs_on: [macos-13, macos-14]
        python-version: ['3.12']

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('**/pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-pip-${{ matrix.python-version }}-

      - name: Show env
        run: |
          sw_vers
          uname -a
          python -V

      - name: Determine arch
        run: echo "ARCH=$(uname -m)" >> $GITHUB_ENV

      - name: Set macOS deployment target
        run: |
          echo "MACOSX_DEPLOYMENT_TARGET=11.0" >> $GITHUB_ENV

      - name: Install freetype (Homebrew) and export path
        shell: bash
        run: |
          set -euxo pipefail

          # Locate brew reliably across macOS-13 (Intel) and macOS-14 (ARM)
          if command -v brew >/dev/null 2>&1; then
            BREW=$(command -v brew)
          elif [ -x /usr/local/bin/brew ]; then
            BREW=/usr/local/bin/brew
          elif [ -x /opt/homebrew/bin/brew ]; then
            BREW=/opt/homebrew/bin/brew
          else
            echo "Homebrew not found" >&2
            exit 1
          fi
          echo "Using brew at: $BREW"

          # Avoid API JSON/JWS issues and auto-update flakiness on older images
          export HOMEBREW_NO_AUTO_UPDATE=1
          export HOMEBREW_NO_ANALYTICS=1
          export HOMEBREW_NO_INSTALL_CLEANUP=1
          export HOMEBREW_NO_INSTALL_FROM_API=1

          # Helper: retry a command up to 3 times
          retry() {
            local n=0
            local max=3
            local delay=10
            until "$@"; do
              exit_code=$?
              n=$((n+1))
              if [ $n -ge $max ]; then
                echo "Command failed after $n attempts: $*" >&2
                return $exit_code
              fi
              echo "Retrying ($n/$max): $*" >&2
              sleep $delay
            done
            return 0
          }

          # If freetype already exists, skip install; otherwise reset taps and install
          if ! "$BREW" --prefix freetype >/dev/null 2>&1; then
            echo "freetype not installed; resetting brew taps and installing deps..."
            retry "$BREW" update-reset || true
            # ensure core tap exists
            "$BREW" tap homebrew/core || true
            retry "$BREW" install freetype harfbuzz libpng brotli graphite2
          else
            echo "freetype already installed: $($BREW --prefix freetype)"
            # still ensure other deps present but don't fail build if missing
            "$BREW" install harfbuzz libpng brotli graphite2 || true
          fi

          FTBREW_PREFIX=$("$BREW" --prefix freetype)
          echo "FREETYPE_PREFIX=${FTBREW_PREFIX}" >> $GITHUB_ENV
          if [ -f "${FTBREW_PREFIX}/lib/libfreetype.6.dylib" ]; then
            FREETYPE_DYLIB="${FTBREW_PREFIX}/lib/libfreetype.6.dylib"
            echo "FREETYPE_DYLIB=${FREETYPE_DYLIB}" >> $GITHUB_ENV
          else
            # Fallback for potential versioned names
            CANDIDATE=$(ls -1 ${FTBREW_PREFIX}/lib/libfreetype*.dylib 2>/dev/null | head -n 1 || true)
            if [ -n "$CANDIDATE" ]; then
              FREETYPE_DYLIB="$CANDIDATE"
              echo "FREETYPE_DYLIB=$FREETYPE_DYLIB" >> $GITHUB_ENV
            else
              echo "Failed to locate libfreetype dylib under ${FTBREW_PREFIX}/lib" >&2
              exit 1
            fi
          fi
          echo "Using FREETYPE_DYLIB=$FREETYPE_DYLIB"
          ls -l "$FREETYPE_DYLIB"

          # Replace OpenCV's bundled freetype so PyInstaller cv2 hook picks our version
          CV2_DIR=$(python -c 'import cv2, os, sys; sys.stdout.write(os.path.dirname(cv2.__file__))')
          echo "CV2_DIR=$CV2_DIR"
          mkdir -p "$CV2_DIR/.dylibs"
          cp -f "$FREETYPE_DYLIB" "$CV2_DIR/.dylibs/libfreetype.6.dylib"
          install_name_tool -id "@rpath/libfreetype.6.dylib" "$CV2_DIR/.dylibs/libfreetype.6.dylib" || true

      - name: Upgrade pip tooling
        run: |
          python -m pip install --upgrade pip setuptools wheel

      - name: Install project and build tool
        run: |
          python -m pip install .
          python -m pip install pyinstaller

      - name: Build single-file binary with PyInstaller
        run: |
          pyinstaller --clean -F -n pdf2zh \
            --add-data "pdf2zh_next/assets:pdf2zh_next/assets" \
            --add-data "pdf2zh_next/gui_translation.yaml:pdf2zh_next" \
            pdf2zh_next/main.py

      - name: Smoke test binary
        run: |
          ./dist/pdf2zh --version | cat
          ./dist/pdf2zh --help | head -n 50 | cat

      - name: Test - Translate a PDF file with plain text only
        run: |
          ./dist/pdf2zh ./test/file/translate.cli.plain.text.pdf --output ./test/file

      - name: Test - Translate a PDF file figure
        run: |
          ./dist/pdf2zh ./test/file/translate.cli.text.with.figure.pdf --output ./test/file

      - name: Delete offline assets and cache (macOS)
        shell: bash
        run: |
          echo "==== 删除离线资源包（如存在）===="
          OFFLINE_ZIP=$(ls -1 ./dist/offline_assets_*.zip 2>/dev/null | head -n 1 || true)
          if [ -n "$OFFLINE_ZIP" ]; then
            echo "找到离线资源包: $OFFLINE_ZIP"
            rm -f "$OFFLINE_ZIP"
            echo "已删除离线资源包"
          else
            echo "未找到离线资源包"
          fi
          echo "==== 删除缓存目录 ~/.cache/babeldoc ===="
          rm -rf "$HOME/.cache/babeldoc" || true

      - name: Test - Translate without offline assets
        run: |
          ./dist/pdf2zh ./test/file/translate.cli.plain.text.pdf --output ./test/file

      - name: Upload test results
        uses: actions/upload-artifact@v4
        with:
          name: macos-test-results-${{ env.ARCH }}
          path: ./test/file/

      - name: Prepare package
        run: |
          mkdir -p release
          mkdir -p "release/pdf2zh-next-macos-${ARCH}"
          cp dist/pdf2zh "release/pdf2zh-next-macos-${ARCH}/"
          cp README.md LICENSE "release/pdf2zh-next-macos-${ARCH}/"
          cd release
          ZIP_NAME="pdf2zh-next-${{ github.ref_type == 'tag' && github.ref_name || 'dev' }}-macos-${ARCH}.zip"
          /usr/bin/zip -r "$ZIP_NAME" "pdf2zh-next-macos-${ARCH}"

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: pdf2zh-next-macos-${{ env.ARCH }}
          path: release/*.zip

      - name: Upload release assets
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v2
        with:
          files: release/*.zip



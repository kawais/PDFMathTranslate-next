name: macOS Build

on:
  workflow_dispatch:
  push:
    tags:
      - 'v*.*.*'

jobs:
  build-macos:
    name: Build on ${{ matrix.runs_on }} (Python ${{ matrix.python-version }})
    runs-on: ${{ matrix.runs_on }}
    strategy:
      fail-fast: false
      matrix:
        runs_on: [macos-13, macos-14]
        python-version: ['3.12']

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('**/pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-pip-${{ matrix.python-version }}-

      - name: Show env
        run: |
          sw_vers
          uname -a
          python -V

      - name: Determine arch
        run: echo "ARCH=$(uname -m)" >> $GITHUB_ENV

      - name: Upgrade pip tooling
        run: |
          python -m pip install --upgrade pip setuptools wheel

      - name: Install project, headless OpenCV and PyInstaller
        run: |
          python -m pip install .
          python -m pip install pyinstaller opencv-python-headless

      - name: Create PyInstaller spec and hook (no repo files needed)
        run: |
          mkdir -p .tmp_hooks
          cat > .tmp_hooks/hook-cv2.py << 'PY'
          from PyInstaller.utils.hooks import (
              collect_data_files,
              collect_dynamic_libs,
              collect_submodules,
          )

          hiddenimports = collect_submodules('cv2')

          datas = []
          # 需要包含 cv2/config.py（OpenCV 在运行时以文件形式读取配置），因此包含 .py 数据文件
          datas += collect_data_files('cv2', include_py_files=True)

          _bins = collect_dynamic_libs('cv2')
          binaries = []
          for src, dest in _bins:
              base = src.split('/')[-1]
              if 'libbluray' in base:
                  continue
              binaries.append((src, dest))
          PY

          # runtime hook: filter interpreter-injected args for top-level run only
          cat > .tmp_hooks/runtime_filter_argv.py << 'RUNTIME'
          import sys
          import re

          SINGLE_FLAGS = {'-B', '-S', '-I'}
          SINGLE_LONG_FLAGS = {'--multiprocessing-fork'}
          FLAGS_WITH_VALUE = {'-c', '-m'}
          PIPE_HANDLE_RE = re.compile(r'^pipe_handle=\d+$')

          def _filter_top_level(argv: list[str]) -> list[str]:
              out: list[str] = []
              i = 0
              while i < len(argv):
                  a = argv[i]
                  # Drop macOS Finder psn arg
                  if a.startswith('-psn_'):
                      i += 1
                      continue
                  # Drop pipe_handle noise when present outside of mp-fork
                  if PIPE_HANDLE_RE.match(a):
                      i += 1
                      continue
                  # Drop singleton flags
                  if a in SINGLE_FLAGS:
                      i += 1
                      continue
                  # Drop long single flags (mp bootstrap)
                  if a in SINGLE_LONG_FLAGS:
                      i += 1
                      continue
                  # Drop flags that take a following value (and consume it)
                  if a in FLAGS_WITH_VALUE:
                      i += 2
                      continue
                  # Defensive: drop obvious multiprocessing bootstrap code strings
                  if ('multiprocessing.' in a and 'main(' in a) or a.startswith('from multiprocessing'):
                      i += 1
                      continue
                  out.append(a)
                  i += 1
              return out

          try:
              sys.argv = _filter_top_level(sys.argv)
          except Exception:
              # Never block startup due to filtering errors
              pass
          RUNTIME

          cat > pyinstaller.macos.spec << 'SPEC'
          # -*- mode: python ; coding: utf-8 -*-

          import os
          from PyInstaller.utils.hooks import collect_submodules, collect_data_files, collect_dynamic_libs

          entry_script = os.path.join('pdf2zh_next', 'main.py')

          hiddenimports = []
          hiddenimports += collect_submodules('babeldoc')

          datas = []
          datas += collect_data_files('babeldoc', include_py_files=False)
          datas += collect_data_files('pdf2zh_next', include_py_files=False)

          binaries = []
          cv2_bins = collect_dynamic_libs('cv2')
          filtered_cv2_bins = []
          for src, dest in cv2_bins:
              base = os.path.basename(src)
              if 'libbluray' in base:
                  continue
              filtered_cv2_bins.append((src, dest))
          binaries += filtered_cv2_bins

          block_cipher = None

          a = Analysis(
              [entry_script],
              pathex=[os.getcwd()],
              binaries=binaries,
              datas=datas,
              hiddenimports=hiddenimports,
              hookspath=['.tmp_hooks'],
              runtime_hooks=['.tmp_hooks/runtime_filter_argv.py'],
              excludes=[],
              noarchive=False,
          )

          pyz = PYZ(a.pure, a.zipped_data, cipher=block_cipher)

          exe = EXE(
              pyz,
              a.scripts,
              [],
              exclude_binaries=True,
              name='pdf2zh',
              debug=False,
              bootloader_ignore_signals=False,
              strip=False,
              upx=False,
              console=True,
              disable_windowed_traceback=False,
          )

          coll = COLLECT(
              exe,
              a.binaries,
              a.zipfiles,
              a.datas,
              strip=False,
              upx=False,
              upx_exclude=[],
              name='pdf2zh'
          )
          SPEC

      - name: Build with PyInstaller spec (filter cv2 libbluray)
        run: |
          pyinstaller --clean -y pyinstaller.macos.spec

      - name: Prepare package
        run: |
          mkdir -p release
          mkdir -p "release/pdf2zh-next-macos-${ARCH}"
          cp -R dist/pdf2zh "release/pdf2zh-next-macos-${ARCH}/"
          cp README.md LICENSE "release/pdf2zh-next-macos-${ARCH}/"
          cd release
          ZIP_NAME="pdf2zh-next-${{ github.ref_type == 'tag' && github.ref_name || 'dev' }}-macos-${ARCH}.zip"
          /usr/bin/zip -r "$ZIP_NAME" "pdf2zh-next-macos-${ARCH}"

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: pdf2zh-next-macos-${{ env.ARCH }}
          path: release/*.zip

      - name: Upload release assets
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v2
        with:
          files: release/*.zip


  test-macos:
    name: Test on ${{ matrix.runs_on }}
    needs:
      - build-macos
    runs-on: ${{ matrix.runs_on }}
    strategy:
      fail-fast: false
      matrix:
        runs_on: [macos-13, macos-14]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Show env
        run: |
          sw_vers
          uname -a
          python -V

      - name: Determine arch
        run: echo "ARCH=$(uname -m)" >> $GITHUB_ENV

      - name: Download build artifact
        uses: actions/download-artifact@v5
        with:
          name: pdf2zh-next-macos-${{ env.ARCH }}
          path: ./release

      - name: Unzip package
        run: |
          ls -lah ./release
          ZIP_FILE=$(ls -1 ./release/*.zip | head -n 1)
          echo "ZIP_FILE=$ZIP_FILE"
          mkdir -p ./release/extracted
          /usr/bin/unzip -o "$ZIP_FILE" -d ./release/extracted
          ls -lah ./release/extracted

      - name: Make binary executable
        run: |
          BIN_DIR=$(find ./release/extracted -type d -name "pdf2zh" | head -n 1)
          echo "BIN_DIR=$BIN_DIR"
          chmod +x "$BIN_DIR/pdf2zh"
          echo "BIN_DIR=$BIN_DIR" >> $GITHUB_ENV

      - name: Test show version
        run: |
          "$BIN_DIR/pdf2zh" --version

      - name: Test - Translate a PDF file with plain text only
        run: |
          "$BIN_DIR/pdf2zh" ./test/file/translate.cli.plain.text.pdf --output ./test/file

      - name: Test - Translate a PDF file figure
        run: |
          "$BIN_DIR/pdf2zh" ./test/file/translate.cli.text.with.figure.pdf --output ./test/file

      - name: Upload test results
        uses: actions/upload-artifact@v4
        with:
          name: macos-test-results-${{ env.ARCH }}
          path: ./test/file/

